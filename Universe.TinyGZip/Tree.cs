// Decompiled with JetBrains decompiler
// Type: Ionic.Zlib.Tree
// Assembly: ZGip.Mini, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 786D35AB-EB80-4211-A8FB-6C01A67110FB
// Assembly location: V:\NoVCS\DotNetZip-mini\ZGip.Mini\ZGip.Mini\bin\Debug\ZGip.Mini.dll

namespace Universe.TinyGZip.InternalImplementation
{
    using System;

    internal sealed class Tree
    {
        internal const int Buf_size = 16;
        private static readonly int HEAP_SIZE = 2*InternalConstants.L_CODES + 1;

        internal static readonly int[] ExtraLengthBits = new int[29]
        {
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            0
        };

        internal static readonly int[] ExtraDistanceBits = new int[30]
        {
            0,
            0,
            0,
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            4,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            12,
            13,
            13
        };

        internal static readonly int[] extra_blbits = new int[19]
        {
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            2,
            3,
            7
        };

        internal static readonly sbyte[] bl_order = new sbyte[19]
        {
            16,
            17,
            18,
            0,
            8,
            7,
            9,
            6,
            10,
            5,
            11,
            4,
            12,
            3,
            13,
            2,
            14,
            1,
            15
        };

        private static readonly sbyte[] _dist_code = new sbyte[512]
        {
            0,
            1,
            2,
            3,
            4,
            4,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            8,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            9,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            11,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            13,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            15,
            0,
            0,
            16,
            17,
            18,
            18,
            19,
            19,
            20,
            20,
            20,
            20,
            21,
            21,
            21,
            21,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29
        };

        internal static readonly sbyte[] LengthCode = new sbyte[256]
        {
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            12,
            12,
            12,
            13,
            13,
            13,
            13,
            14,
            14,
            14,
            14,
            15,
            15,
            15,
            15,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            17,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            18,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            26,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            28
        };

        internal static readonly int[] LengthBase = new int[29]
        {
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            10,
            12,
            14,
            16,
            20,
            24,
            28,
            32,
            40,
            48,
            56,
            64,
            80,
            96,
            112,
            128,
            160,
            192,
            224,
            0
        };

        internal static readonly int[] DistanceBase = new int[30]
        {
            0,
            1,
            2,
            3,
            4,
            6,
            8,
            12,
            16,
            24,
            32,
            48,
            64,
            96,
            128,
            192,
            256,
            384,
            512,
            768,
            1024,
            1536,
            2048,
            3072,
            4096,
            6144,
            8192,
            12288,
            16384,
            24576
        };

        internal short[] dyn_tree;
        internal int max_code;
        internal StaticTree staticTree;

        internal static int DistanceCode(int dist)
        {
            return dist < 256 ? _dist_code[dist] : _dist_code[256 + SharedUtils.URShift(dist, 7)];
        }

        internal void gen_bitlen(DeflateManager s)
        {
            var numArray1 = dyn_tree;
            var numArray2 = staticTree.treeCodes;
            var numArray3 = staticTree.extraBits;
            var num1 = staticTree.extraBase;
            var index1 = staticTree.maxLength;
            var num2 = 0;
            for (var index2 = 0; index2 <= InternalConstants.MAX_BITS; ++index2)
                s.bl_count[index2] = 0;
            numArray1[s.heap[s.heap_max]*2 + 1] = 0;
            int index3;
            for (index3 = s.heap_max + 1; index3 < HEAP_SIZE; ++index3)
            {
                var num3 = s.heap[index3];
                var index2 = numArray1[numArray1[num3*2 + 1]*2 + 1] + 1;
                if (index2 > index1)
                {
                    index2 = index1;
                    ++num2;
                }
                numArray1[num3*2 + 1] = (short) index2;
                if (num3 <= max_code)
                {
                    ++s.bl_count[index2];
                    var num4 = 0;
                    if (num3 >= num1)
                        num4 = numArray3[num3 - num1];
                    var num5 = numArray1[num3*2];
                    s.opt_len += num5*(index2 + num4);
                    if (numArray2 != null)
                        s.static_len += num5*(numArray2[num3*2 + 1] + num4);
                }
            }
            if (num2 == 0)
                return;
            do
            {
                var index2 = index1 - 1;
                while (s.bl_count[index2] == 0)
                    --index2;
                --s.bl_count[index2];
                s.bl_count[index2 + 1] = (short) (s.bl_count[index2 + 1] + 2);
                --s.bl_count[index1];
                num2 -= 2;
            } while (num2 > 0);
            for (var index2 = index1; index2 != 0; --index2)
            {
                int num3 = s.bl_count[index2];
                while (num3 != 0)
                {
                    var num4 = s.heap[--index3];
                    if (num4 <= max_code)
                    {
                        if (numArray1[num4*2 + 1] != index2)
                        {
                            s.opt_len = (int) (s.opt_len + (index2 - (long) numArray1[num4*2 + 1])*numArray1[num4*2]);
                            numArray1[num4*2 + 1] = (short) index2;
                        }
                        --num3;
                    }
                }
            }
        }

        internal void build_tree(DeflateManager s)
        {
            var tree = dyn_tree;
            var numArray1 = staticTree.treeCodes;
            var num1 = staticTree.elems;
            var max_code = -1;
            s.heap_len = 0;
            s.heap_max = HEAP_SIZE;
            for (var index = 0; index < num1; ++index)
            {
                if (tree[index*2] != 0)
                {
                    s.heap[++s.heap_len] = max_code = index;
                    s.depth[index] = 0;
                }
                else
                    tree[index*2 + 1] = 0;
            }
            while (s.heap_len < 2)
            {
                var numArray2 = s.heap;
                var index1 = ++s.heap_len;
                int num2;
                if (max_code >= 2)
                    num2 = 0;
                else
                    max_code = num2 = max_code + 1;
                var num3 = num2;
                numArray2[index1] = num2;
                var index2 = num3;
                tree[index2*2] = 1;
                s.depth[index2] = 0;
                --s.opt_len;
                if (numArray1 != null)
                    s.static_len -= numArray1[index2*2 + 1];
            }
            this.max_code = max_code;
            for (var k = s.heap_len/2; k >= 1; --k)
                s.pqdownheap(tree, k);
            var index3 = num1;
            do
            {
                var index1 = s.heap[1];
                s.heap[1] = s.heap[s.heap_len--];
                s.pqdownheap(tree, 1);
                var index2 = s.heap[1];
                s.heap[--s.heap_max] = index1;
                s.heap[--s.heap_max] = index2;
                tree[index3*2] = (short) (tree[index1*2] + tree[index2*2]);
                s.depth[index3] = (sbyte) (Math.Max((byte) s.depth[index1], (byte) s.depth[index2]) + 1);
                tree[index1*2 + 1] = tree[index2*2 + 1] = (short) index3;
                s.heap[1] = index3++;
                s.pqdownheap(tree, 1);
            } while (s.heap_len >= 2);
            s.heap[--s.heap_max] = s.heap[1];
            gen_bitlen(s);
            gen_codes(tree, max_code, s.bl_count);
        }

        internal static void gen_codes(short[] tree, int max_code, short[] bl_count)
        {
            var numArray = new short[InternalConstants.MAX_BITS + 1];
            short num = 0;
            for (var index = 1; index <= InternalConstants.MAX_BITS; ++index)
                numArray[index] = num = (short) (num + bl_count[index - 1] << 1);
            for (var index = 0; index <= max_code; ++index)
            {
                int len = tree[index*2 + 1];
                if (len != 0)
                    tree[index*2] = (short) bi_reverse(numArray[len]++, len);
            }
        }

        internal static int bi_reverse(int code, int len)
        {
            var num1 = 0;
            do
            {
                var num2 = num1 | code & 1;
                code >>= 1;
                num1 = num2 << 1;
            } while (--len > 0);
            return num1 >> 1;
        }
    }
}